[{"name":"app.R","content":"library(shiny)\nlibrary(visNetwork)\nlibrary(shinyjs)\nlibrary(DT)\nlibrary(igraph)\nlibrary(base64enc)\n\nui <- fluidPage(\n  useShinyjs(),\n  \n  tags$head(\n    tags$style(HTML(\"\n      /* Global styles */\n      body {\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        background-color: #f8fafc;\n        color: #334155;\n      }\n      \n      /* Header styling */\n      .app-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 15px 30px;\n        background: linear-gradient(135deg, #1a4b8c 0%, #2c3e50 100%);\n        color: white;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        margin-bottom: 25px;\n        border-radius: 0 0 8px 8px;\n      }\n      \n      .app-title {\n        margin: 0;\n        flex-grow: 1;\n        font-weight: 600;\n        font-size: 1.8rem;\n        text-shadow: 1px 1px 3px rgba(0,0,0,0.3);\n        letter-spacing: 0.5px;\n      }\n      \n      .app-logo {\n        height: 120px;\n        filter: drop-shadow(0 2px 6px rgba(0,0,0,0.4));\n      }\n      \n      /* Panel styling */\n      .panel-style {\n        background-color: white;\n        border-radius: 10px;\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);\n        padding: 22px;\n        margin-bottom: 24px;\n        border-top: 1px solid #f1f5f9;\n        border-left: 4px solid #3a7ca5;\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\n      }\n      \n      .panel-style:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n      }\n      \n      .panel-header {\n        color: #2c3e50;\n        font-weight: 600;\n        margin-top: 0;\n        margin-bottom: 18px;\n        padding-bottom: 12px;\n        border-bottom: 1px solid #e8edf2;\n        font-size: 1.3rem;  /* Increased from 1.1rem */\n        display: flex;\n        align-items: center;\n        gap: 10px;  /* Increased from 8px */\n      }\n      \n      .panel-header i {\n        font-size: 1.4rem;  /* Added for icon sizing */\n      }\n      \n      /* Button styling */\n      .btn-primary-custom {\n        background: linear-gradient(to bottom, #3a7ca5, #2a5c7a);\n        border: none;\n        color: white;\n        width: 100%;\n        margin-bottom: 10px;\n        border-radius: 8px;\n        padding: 10px;\n        font-weight: 500;\n        transition: all 0.3s;\n        box-shadow: 0 3px 6px rgba(58, 124, 165, 0.2);\n      }\n      \n      .btn-primary-custom:hover {\n        background: linear-gradient(to bottom, #4a8cb5, #3a6c8a);\n        transform: translateY(-2px);\n        box-shadow: 0 6px 10px rgba(58, 124, 165, 0.3);\n      }\n      \n      .btn-warning-custom {\n        background: linear-gradient(to bottom, #e67e22, #d35400);\n        border: none;\n        color: white;\n        width: 100%;\n        margin-bottom: 10px;\n        border-radius: 8px;\n        padding: 10px;\n        font-weight: 500;\n        transition: all 0.3s;\n        box-shadow: 0 3px 6px rgba(230, 126, 34, 0.2);\n      }\n      \n      .btn-warning-custom:hover {\n        background: linear-gradient(to bottom, #f39c12, #e67e22);\n        transform: translateY(-2px);\n        box-shadow: 0 6px 10px rgba(230, 126, 34, 0.3);\n      }\n      \n      .btn-danger-custom {\n        background: linear-gradient(to bottom, #c0392b, #922b21);\n        border: none;\n        color: white;\n        width: 100%;\n        margin-bottom: 10px;\n        border-radius: 8px;\n        padding: 10px;\n        font-weight: 500;\n        transition: all 0.3s;\n        box-shadow: 0 3px 6px rgba(192, 57, 43, 0.2);\n      }\n      \n      .btn-danger-custom:hover {\n        background: linear-gradient(to bottom, #e74c3c, #c0392b);\n        transform: translateY(-2px);\n        box-shadow: 0 6px 10px rgba(192, 57, 43, 0.3);\n      }\n      \n      /* Input styling */\n      .form-control {\n        border-radius: 8px;\n        border: 1px solid #d9e2ec;\n        padding: 10px 14px;\n        margin-bottom: 14px;\n        transition: all 0.3s;\n        background-color: #f8fafc;\n      }\n      \n      .form-control:focus {\n        border-color: #3a7ca5;\n        box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.2);\n        background-color: white;\n      }\n      \n      /* Network visualization container */\n      #network {\n        border-radius: 10px;\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);\n        background-color: white;\n        overflow: hidden;\n      }\n      \n      /* Table styling */\n      .dataTables_wrapper {\n        border-radius: 10px;\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);\n        padding: 18px;\n        background-color: white;\n      }\n      \n      /* Text output styling */\n      .shiny-text-output {\n        background-color: #f1f5f9;\n        border-radius: 8px;\n        padding: 18px;\n        border-left: 4px solid #3a7ca5;\n        font-family: 'Courier New', monospace;\n        max-height: 200px;\n        overflow-y: auto;\n        line-height: 1.5;\n      }\n      \n      /* HR styling */\n      hr {\n        border-top: 1px solid #e8edf2;\n        margin: 22px 0;\n      }\n      \n      /* Custom select input styling */\n      .selectize-input {\n        border-radius: 8px;\n        border: 1px solid #d9e2ec;\n        padding: 10px 14px;\n        background-color: #f8fafc;\n      }\n      \n      .selectize-input.focus {\n        border-color: #3a7ca5;\n        box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.2);\n      }\n      \n      /* File input button styling */\n      .btn-file {\n        background: linear-gradient(to bottom, #3a7ca5, #2a5c7a);\n        color: white;\n        border-radius: 8px;\n        padding: 8px 16px;\n        transition: all 0.3s;\n      }\n      \n      .btn-file:hover {\n        background: linear-gradient(to bottom, #4a8cb5, #3a6c8a);\n      }\n      \n      /* Download link styling */\n      .download-ready {\n        background-color: #d4edda;\n        border: 1px solid #c3e6cb;\n        border-radius: 8px;\n        padding: 15px;\n        margin-top: 15px;\n        text-align: center;\n      }\n      \n      .download-link {\n        display: inline-block;\n        padding: 10px 20px;\n        background: linear-gradient(to bottom, #28a745, #20c997);\n        color: white;\n        text-decoration: none;\n        border-radius: 6px;\n        font-weight: 500;\n        transition: all 0.3s;\n        margin-top: 10px;\n      }\n      \n      .download-link:hover {\n        background: linear-gradient(to bottom, #20c997, #28a745);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);\n        color: white;\n      }\n    \"))\n  ),\n  \n  # Header with title on left and logo on right\n  div(class = \"app-header\",\n      h1(class = \"app-title\", \"DAGGR: Directed Acyclic Graph Generator for Random variables\"),\n      tags$img(src = \"DAGGR_logo.svg\", class = \"app-logo\", alt = \"App Logo\")\n  ),\n  \n  fluidRow(\n    # Left column for node controls\n    column(3,\n           div(class = \"panel-style\",\n               h4(class = \"panel-header\", icon(\"circle-nodes\", class = \"fa-lg\"), \" Node Controls\"),\n               textInput(\"node_name\", \"Node Name\", \"\", placeholder = \"Enter node name\"),\n               selectInput(\"node_type\", \"Random Variable Type\", \n                           choices = c(\"normal\", \"binomial\")),\n               conditionalPanel(\n                 condition = \"input.node_type == 'normal'\",\n                 textInput(\"node_mean\", \"Mean\", value = \"\", placeholder = \"(optional)\"),\n                 textInput(\"node_sd\", \"SD\", value = \"\", placeholder = \"(optional)\")\n               ),\n               conditionalPanel(\n                 condition = \"input.node_type == 'binomial'\",\n                 textInput(\"node_p\", \"Probability p\", value = \"\", placeholder = \"(optional)\"),\n                 textInput(\"node_size\", \"Size n\", value = \"\", placeholder = \"(optional)\")\n               ),\n               textInput(\"node_intercept\", \"Intercept\", \"\", placeholder = \"(optional)\"),\n               fluidRow(\n                 column(width = 5,\n                        selectInput(\"node_shape\", \"Shape\", \n                                    choices = c(\"circle\", \"box\"), \n                                    selected = \"circle\")),\n                 column(width = 7,textInput(\"node_color\", \"Color\", value = \"\", placeholder = \"lightgray (default)\"))),\n               actionButton(\"add_node\", \"Add/Update Node\", class = \"btn-primary-custom\", icon = icon(\"plus\")),\n               actionButton(\"delete_node_btn\", \"Delete Node\", class = \"btn-warning-custom\", icon = icon(\"trash\")),\n               actionButton(\"clear_nodes\", \"Clear All Nodes\", class = \"btn-danger-custom\", icon = icon(\"broom\"))\n           )\n    ),\n    \n    # Middle column for network visualization\n    column(6,\n           div(class = \"panel-style\",\n               h4(class = \"panel-header\", \"DAG\"),\n               visNetworkOutput(\"network\", height = \"500px\"),\n               \n               h4(class = \"panel-header\", icon(\"code\", class = \"fa-lg\"), \" Stochastic Expressions\"),\n               verbatimTextOutput(\"complete_expressions\"),\n               \n               h4(class = \"panel-header\", icon(\"table\", class = \"fa-lg\"), \" Node Attributes\"),\n               DTOutput(\"node_table\")\n           )\n    ),\n    \n    # Right column for edge controls\n    column(3,\n           div(class = \"panel-style\",\n               h4(class = \"panel-header\", icon(\"link\", class = \"fa-lg\"), \" Edge Controls\"),\n               textInput(\"from_node\", \"From Node (name)\", \"\", placeholder = \"Source node\"),\n               textInput(\"to_node\", \"To Node (name)\", \"\", placeholder = \"Target node\"),\n               textInput(\"edge_value\", \"Edge Value\", value = \"\", placeholder = \"(optional)\"),\n               selectInput(\"edge_style\", \"Edge Style\", \n                           choices = c(\"Solid\" = FALSE, \"Dashed\" = TRUE), \n                           selected = FALSE),\n               actionButton(\"add_edge\", \"Add/Update Edge\", class = \"btn-primary-custom\", icon = icon(\"link\")),\n               actionButton(\"delete_edge_btn\", \"Delete Edge\", class = \"btn-warning-custom\", icon = icon(\"unlink\")),\n               htmlOutput(\"edge_error\"),\n               actionButton(\"clear_edges\", \"Clear All Edges\", class = \"btn-danger-custom\", icon = icon(\"broom\")),\n               hr(),\n               h4(class = \"panel-header\", icon(\"database\", class = \"fa-lg\"), \" Data Import/Export\"),\n               fileInput(\"load_data\", \"Load Network Data\", \n                         accept = c(\".rds\", \".RData\", \".rda\"),\n                         buttonLabel = \"Browse...\",\n                         placeholder = \"No file selected\"),\n               textInput(\"file_name\", \"File name for Download\", value = \"\", placeholder = \"(optional)\"),\n               actionButton(\"generate_download\", \"Generate Download Link\", class = \"btn-primary-custom\", icon = icon(\"download\")),\n               uiOutput(\"download_ui\")\n           )\n    )\n  ) \n)\n\nserver <- function(input, output, session) {\n  # Reactive values to store nodes and edges\n  rv <- reactiveValues(\n    nodes = data.frame(\n      id = integer(), \n      label = character(), \n      type = character(),\n      mean = numeric(),\n      sd = numeric(),\n      p = numeric(),\n      size = numeric(),\n      intercept = character(),\n      shape = character(),\n      color = character(),\n      x = numeric(),\n      y = numeric(),\n      stringsAsFactors = FALSE\n    ),\n    edges = data.frame(\n      from = integer(), \n      to = integer(),\n      value = character(),\n      label = character(),\n      dashes = logical(),\n      stringsAsFactors = FALSE\n    ),\n    has_cycles = FALSE,\n    edge_error = NULL,\n    download_uri = NULL,\n    layout_coords = list()\n  )\n  \n  # Function to validate color\n  validate_color <- function(color) {\n    # Check if color is valid by trying to convert to RGB\n    tryCatch({\n      col2rgb(color)\n      return(color)\n    }, error = function(e) {\n      return(\"lightgray\")\n    })\n  }\n  \n  # Initialize layout coordinates\n  observe({\n    if (nrow(rv$nodes) > 0) {\n      rv$layout_coords <- setNames(\n        lapply(1:nrow(rv$nodes), function(i) {\n          list(x = rv$nodes$x[i], y = rv$nodes$y[i])\n        }),\n        as.character(rv$nodes$id)\n      )\n    }\n  })\n  \n  # Capture node positions when network is rendered or updated\n  observe({\n    # Trigger position capture after network is stable\n    if (!is.null(input$network_positions)) {\n      positions <- input$network_positions\n      if (length(positions) > 0) {\n        # Update our stored coordinates\n        for (node_id in names(positions)) {\n          if (node_id %in% names(rv$layout_coords)) {\n            rv$layout_coords[[node_id]] <- list(\n              x = positions[[node_id]]$x,\n              y = positions[[node_id]]$y\n            )\n          }\n        }\n      }\n    }\n  })\n  \n  # Function to check for cycles in the graph\n  check_for_cycles <- function() {\n    if (nrow(rv$edges) == 0) return(FALSE)\n    \n    g <- graph_from_data_frame(\n      d = rv$edges[, c(\"from\", \"to\")],\n      vertices = rv$nodes$id,\n      directed = TRUE\n    )\n    \n    !is_dag(g)\n  }\n  \n  # Function to generate complete expressions for all nodes\n  generate_complete_expressions <- function(as_list = FALSE) {\n    if (nrow(rv$nodes) == 0) {\n      if (as_list) return(list()) else return(\"No nodes defined in the network\")\n    }\n    \n    expressions <- lapply(rv$nodes$id, function(node_id) {\n      node_label <- rv$nodes$label[rv$nodes$id == node_id]\n      node_type <- rv$nodes$type[rv$nodes$id == node_id]\n      \n      # Find incoming edges (parent nodes)\n      incoming_edges <- rv$edges[rv$edges$to == node_id, ]\n      \n      # Build the linear combination part\n      if (nrow(incoming_edges) > 0) {\n        sources <- sapply(incoming_edges$from, function(src_id) {\n          src_label <- rv$nodes$label[rv$nodes$id == src_id]\n          weight <- incoming_edges$label[incoming_edges$from == src_id]\n          paste0(weight, \"*\", src_label)\n        })\n        linear_part <- paste(sources, collapse = \" + \")\n      } else {\n        linear_part <- NULL\n      }\n      \n      # Generate the stochastic term with placeholders for missing parameters\n      stochastic_term <- switch(\n        node_type,\n        \"normal\" = {\n          mean_val <- ifelse(is.na(rv$nodes$mean[rv$nodes$id == node_id]) | rv$nodes$mean[rv$nodes$id == node_id] == \"\", \n                             paste0(\"mean.\", node_label), \n                             rv$nodes$mean[rv$nodes$id == node_id])\n          sd_val <- ifelse(is.na(rv$nodes$sd[rv$nodes$id == node_id]) | rv$nodes$sd[rv$nodes$id == node_id] == \"\", \n                           paste0(\"sd.\", node_label), \n                           rv$nodes$sd[rv$nodes$id == node_id])\n          paste0(\"rnorm(n, mean=\", mean_val, \", sd=\", sd_val, \")\")\n        },\n        \"binomial\" = {\n          p_val <- ifelse(is.na(rv$nodes$p[rv$nodes$id == node_id]) || rv$nodes$p[rv$nodes$id == node_id] == \"\", \n                          paste0(\"p.\", node_label), \n                          rv$nodes$p[rv$nodes$id == node_id])\n          size_val <- ifelse(is.na(rv$nodes$size[rv$nodes$id == node_id]) || rv$nodes$size[rv$nodes$id == node_id] ==\"\", \n                             paste0(\"size.\", node_label), \n                             rv$nodes$size[rv$nodes$id == node_id])\n          paste0(\"rbinom(n, size=\", size_val, \", prob=\", p_val, \")\")\n        },\n        \"0\"  # Fallback\n      )\n      \n      \n      # Combine the parts with <- assignment\n      if(rv$nodes$intercept[rv$nodes$id == node_id] == \"\"){\n        if (!is.null(linear_part)) {\n          expr <- paste0(node_label, \" <- \", linear_part, \" + \", stochastic_term)\n        } else {\n          expr <- paste0(node_label, \" <- \", stochastic_term)\n        }\n      }else{\n        if (!is.null(linear_part)) {\n          expr <- paste0(node_label, \" <- \", rv$nodes$intercept[rv$nodes$id == node_id], \" + \", linear_part, \" + \", stochastic_term)\n        } else {\n          expr <- paste0(node_label, \" <- \", rv$nodes$intercept[rv$nodes$id == node_id], \" + \", stochastic_term)\n        }\n      }\n      \n      \n      expr\n    })\n    \n    if (as_list) {\n      return(unlist(expressions))\n    } else {\n      return(paste(unlist(expressions), collapse = \"\\n\"))\n    }\n  }\n  \n  # Generate download link when button is clicked\n  observeEvent(input$generate_download, {\n    req(nrow(rv$nodes) > 0)  # Ensure there are nodes to download\n    \n    # Create network data\n    network_data <- list(\n      nodes = rv$nodes,\n      edges = rv$edges,\n      expressions = generate_complete_expressions(as_list = TRUE)\n    )\n    \n    # Create a temporary file\n    temp_file <- tempfile(fileext = \".rds\")\n    saveRDS(network_data, temp_file)\n    \n    # Read the file as binary and convert to data URI\n    file_data <- readBin(temp_file, \"raw\", file.info(temp_file)$size)\n    file.remove(temp_file)\n    \n    # Create data URI\n    b64 <- base64enc::base64encode(file_data)\n    uri <- paste0(\"data:application/octet-stream;base64,\", b64)\n    \n    rv$download_uri <- uri\n  })\n  \n  # Render download link UI\n  output$download_ui <- renderUI({\n    req(rv$download_uri)\n    \n    tags$div(\n      class = \"download-ready\",\n      h5(\"Download Ready:\"),\n      tags$a(\n        href = rv$download_uri,\n        download = ifelse(input$file_name==\"\", paste0(\"DAGGR-data-\", Sys.Date(), \".rds\"), paste0(input$file_name, \".rds\")),\n        icon(\"download\"),\n        \"Click to download RDS file\",\n        class = \"download-link\"\n      )\n    )\n  })\n  \n  # Load network data from file (updated to handle expressions and positions)\n  observeEvent(input$load_data, {\n    req(input$load_data)\n    \n    tryCatch({\n      ext <- tools::file_ext(input$load_data$name)\n      \n      if (ext == \"rds\") {\n        loaded_data <- readRDS(input$load_data$datapath)\n      } else if (ext %in% c(\"RData\", \"rda\")) {\n        env <- new.env()\n        load(input$load_data$datapath, envir = env)\n        loaded_data <- get(ls(env)[1], envir = env)\n      } else {\n        stop(\"Unsupported file format\")\n      }\n      \n      if (!all(c(\"nodes\", \"edges\") %in% names(loaded_data))) {\n        stop(\"Invalid data structure - must contain 'nodes' and 'edges'\")\n      }\n      \n      required_node_cols <- c(\"id\", \"label\")\n      if (!all(required_node_cols %in% colnames(loaded_data$nodes))) {\n        stop(paste(\"Nodes data must contain columns:\", paste(required_node_cols, collapse = \", \")))\n      }\n      \n      required_edge_cols <- c(\"from\", \"to\")\n      if (!all(required_edge_cols %in% colnames(loaded_data$edges))) {\n        stop(paste(\"Edges data must contain columns:\", paste(required_edge_cols, collapse = \", \")))\n      }\n      \n      # Handle old data that doesn't have dashes column\n      if (!\"dashes\" %in% colnames(loaded_data$edges)) {\n        loaded_data$edges$dashes <- FALSE  # Default to solid edges\n      }\n      \n      if (!\"size\" %in% colnames(loaded_data$nodes)) {\n        loaded_data$nodes$size <- 1\n      }\n      \n      # Handle shape and color for backward compatibility\n      if (!\"shape\" %in% colnames(loaded_data$nodes)) {\n        loaded_data$nodes$shape <- \"circle\"  # Default shape\n      }\n      \n      if (!\"color\" %in% colnames(loaded_data$nodes)) {\n        loaded_data$nodes$color <- \"lightgray\"  # Default color\n      } else {\n        # Validate colors in loaded data\n        loaded_data$nodes$color <- sapply(loaded_data$nodes$color, validate_color)\n      }\n      \n      # Ensure x and y coordinates are present and restore them\n      if (\"x\" %in% colnames(loaded_data$nodes) && \"y\" %in% colnames(loaded_data$nodes)) {\n        # Use saved positions if available\n        rv$nodes <- loaded_data$nodes\n        rv$edges <- loaded_data$edges\n        \n        # Restore layout coordinates from loaded data\n        rv$layout_coords <- setNames(\n          lapply(1:nrow(rv$nodes), function(i) {\n            list(x = rv$nodes$x[i], y = rv$nodes$y[i])\n          }),\n          as.character(rv$nodes$id)\n        )\n      } else {\n        # If no positions saved, use default layout\n        rv$nodes <- loaded_data$nodes\n        rv$edges <- loaded_data$edges\n        rv$layout_coords <- list()  # Will be calculated automatically\n      }\n      \n      rv$has_cycles <- check_for_cycles()\n      \n      showNotification(\"Network data loaded successfully\", type = \"message\")\n    }, error = function(e) {\n      showNotification(paste(\"Error loading file:\", e$message), type = \"error\")\n    })\n  })\n  \n  # Output complete expressions\n  output$complete_expressions <- renderText({\n    generate_complete_expressions()\n  })\n  \n  # Update cycle status text\n  output$cycle_status <- renderText({\n    if (rv$has_cycles) {\n      \"Cycle detected in network! This may cause problems.\"\n    } else {\n      \"No cycles detected in network.\"\n    }\n  })\n  \n  # Add or update a node\n  observeEvent(input$add_node, {\n    if (input$node_name == \"\") {\n      showNotification(\"Please enter a node name\", type = \"warning\")\n      return()\n    }\n    \n    existing_node_index <- which(rv$nodes$label == input$node_name)\n    \n    # Get current positions BEFORE adding new node\n    current_positions <- isolate(rv$layout_coords)\n    \n    if (length(current_positions) > 0) {\n      # Get all x and y coordinates\n      x_coords <- sapply(current_positions, function(coord) coord$x)\n      y_coords <- sapply(current_positions, function(coord) coord$y)\n      \n      # Calculate reasonable placement (right of the rightmost node)\n      max_x <- max(x_coords, na.rm = TRUE)\n      min_x <- min(x_coords, na.rm = TRUE)\n      avg_y <- mean(y_coords, na.rm = TRUE)\n      \n      new_x <- max_x + 100  # Place to the right of rightmost node\n      new_y <- avg_y\n      \n    } else {\n      # Default position if no nodes exist\n      new_x <- 0\n      new_y <- 0\n    }\n    \n    # Validate and set color\n    node_color <- ifelse(input$node_color == \"\", \"lightgray\", input$node_color)\n    node_color <- validate_color(node_color)\n    \n    if (length(existing_node_index) > 0) {\n      rv$nodes$type[existing_node_index] <- input$node_type\n      rv$nodes$mean[existing_node_index] <- ifelse(input$node_type == \"normal\", input$node_mean, NA)\n      rv$nodes$sd[existing_node_index] <- ifelse(input$node_type == \"normal\", input$node_sd, NA)\n      rv$nodes$p[existing_node_index] <- ifelse(input$node_type == \"binomial\", input$node_p, NA)\n      rv$nodes$size[existing_node_index] <- ifelse(input$node_type == \"binomial\", input$node_size, NA)\n      rv$nodes$intercept[existing_node_index] <- input$node_intercept\n      rv$nodes$shape[existing_node_index] <- input$node_shape\n      rv$nodes$color[existing_node_index] <- node_color\n      showNotification(paste(\"Node\", input$node_name, \"updated\"), type = \"message\")\n    } else {\n      new_id <- ifelse(nrow(rv$nodes) == 0, 1, max(rv$nodes$id) + 1)\n      \n      new_node <- data.frame(\n        id = new_id,\n        label = input$node_name,\n        type = input$node_type,\n        mean = ifelse(input$node_type == \"normal\", input$node_mean, NA),\n        sd = ifelse(input$node_type == \"normal\", input$node_sd, NA),\n        p = ifelse(input$node_type == \"binomial\", input$node_p, NA),\n        size = ifelse(input$node_type == \"binomial\", input$node_size, NA),\n        intercept = input$node_intercept,\n        shape = input$node_shape,\n        color = node_color,\n        x = new_x,\n        y = new_y,\n        stringsAsFactors = FALSE\n      )\n      \n      rv$nodes <- rbind(rv$nodes, new_node)\n      rv$layout_coords[[as.character(new_id)]] <- list(x = new_x, y = new_y)\n      showNotification(paste(\"Node\", input$node_name, \"added\"), type = \"message\")\n    }\n    \n    updateTextInput(session, \"node_name\", value = \"\")\n    updateTextInput(session, \"node_mean\", value = \"\")\n    updateTextInput(session, \"node_sd\", value = \"\")\n    updateTextInput(session, \"node_p\", value = \"\")\n    updateTextInput(session, \"node_intercept\", value = \"\")\n    updateTextInput(session, \"node_size\", value = \"\")\n    updateTextInput(session, \"node_color\", value = \"\")\n  })\n  \n  # Handle node dragging - update positions in real-time\n  observeEvent(input$node_positions, {\n    positions <- input$node_positions\n    if (!is.null(positions) && length(positions) > 0) {\n      # Update our stored coordinates\n      for (node_id in names(positions)) {\n        rv$layout_coords[[node_id]] <- list(\n          x = positions[[node_id]]$x,\n          y = positions[[node_id]]$y\n        )\n      }\n      \n      # Also update the nodes dataframe\n      for (i in 1:nrow(rv$nodes)) {\n        node_id <- as.character(rv$nodes$id[i])\n        if (node_id %in% names(positions)) {\n          rv$nodes$x[i] <- positions[[node_id]]$x\n          rv$nodes$y[i] <- positions[[node_id]]$y\n        }\n      }\n    }\n  })\n  \n  # Delete node based on node name input\n  observeEvent(input$delete_node_btn, {\n    if (input$node_name == \"\") {\n      showNotification(\"Please enter a node name to delete\", type = \"warning\")\n      return()\n    }\n    \n    # Check if node exists\n    node_exists <- input$node_name %in% rv$nodes$label\n    \n    if (!node_exists) {\n      showNotification(paste(\"Node\", input$node_name, \"not found\"), type = \"error\")\n      return()\n    }\n    \n    node_id <- rv$nodes$id[rv$nodes$label == input$node_name]\n    rv$nodes <- rv$nodes[rv$nodes$id != node_id, ]\n    rv$edges <- rv$edges[rv$edges$from != node_id & rv$edges$to != node_id, ]\n    rv$has_cycles <- check_for_cycles()\n    \n    showNotification(paste(\"Node\", input$node_name, \"deleted\"), type = \"message\")\n    updateTextInput(session, \"node_name\", value = \"\")\n  })\n  \n  # Add a new edge with validation\n  observeEvent(input$add_edge, {\n    # Reset error message\n    rv$edge_error <- NULL\n    \n    # Validate inputs\n    if (input$from_node == \"\" || input$to_node == \"\") {\n      rv$edge_error <- \"Please enter both from and to node names\"\n      return()\n    }\n    \n    # Check if nodes exist\n    from_exists <- input$from_node %in% rv$nodes$label\n    to_exists <- input$to_node %in% rv$nodes$label\n    \n    if (!from_exists || !to_exists) {\n      missing_nodes <- c()\n      if (!from_exists) missing_nodes <- c(missing_nodes, input$from_node)\n      if (!to_exists) missing_nodes <- c(missing_nodes, input$to_node)\n      rv$edge_error <- paste(\"Node(s) not found:\", paste(missing_nodes, collapse = \", \"))\n      return()\n    }\n    \n    if (input$from_node == input$to_node) {\n      rv$edge_error <- \"Cannot create edge to the same node\"\n      return()\n    }\n    \n    from_id <- rv$nodes$id[rv$nodes$label == input$from_node]\n    to_id <- rv$nodes$id[rv$nodes$label == input$to_node]\n    \n    if(is.na(input$edge_value) | input$edge_value == \"\"){\n      tmp_edge_value <- paste0(\"coef.\", input$from_node, \".\", input$to_node)\n    }else{\n      tmp_edge_value <- input$edge_value\n    }\n    \n    \n    edge_style <- as.logical(input$edge_style)\n    \n    temp_edges <- rbind(\n      rv$edges,\n      data.frame(\n        from = from_id,\n        to = to_id,\n        value = tmp_edge_value,  # Accept any character input\n        label = tmp_edge_value,  # Use the input directly as label\n        dashes = edge_style,     \n        stringsAsFactors = FALSE\n      )\n    )\n    \n    g <- graph_from_data_frame(\n      d = temp_edges[, c(\"from\", \"to\")],\n      vertices = rv$nodes$id,\n      directed = TRUE\n    )\n    \n    if (!is_dag(g)) {\n      rv$edge_error <- \"This edge would create a cycle in the network! Not added.\"\n      return()\n    }\n    \n    existing_edge <- rv$edges[\n      rv$edges$from == from_id & rv$edges$to == to_id,\n    ]\n    \n    if (nrow(existing_edge) > 0) {\n      showNotification(\"Edge already exists. Updating its value and style.\", type = \"warning\")\n      rv$edges[rv$edges$from == from_id & rv$edges$to == to_id, \"value\"] <- \"\"\n      rv$edges[rv$edges$from == from_id & rv$edges$to == to_id, \"label\"] <- tmp_edge_value\n      rv$edges[rv$edges$from == from_id & rv$edges$to == to_id, \"dashes\"] <- edge_style\n    } else {\n      rv$edges <- temp_edges\n      showNotification(\"Edge added successfully\", type = \"message\")\n    }\n    \n    rv$has_cycles <- check_for_cycles()\n  })\n  \n  # Display edge error message\n  output$edge_error <- renderUI({\n    if (!is.null(rv$edge_error)) {\n      tags$div(\n        style = \"color: red; margin-top: 10px; margin-bottom: 10px;\",\n        rv$edge_error\n      )\n    }\n  })\n  \n  # Delete edge based on from/to inputs\n  observeEvent(input$delete_edge_btn, {\n    # Validate inputs\n    if (input$from_node == \"\" || input$to_node == \"\") {\n      rv$edge_error <- \"Please enter both from and to node names to delete edge\"\n      return()\n    }\n    \n    # Check if nodes exist\n    from_exists <- input$from_node %in% rv$nodes$label\n    to_exists <- input$to_node %in% rv$nodes$label\n    \n    if (!from_exists || !to_exists) {\n      missing_nodes <- c()\n      if (!from_exists) missing_nodes <- c(missing_nodes, input$from_node)\n      if (!to_exists) missing_nodes <- c(missing_nodes, input$to_node)\n      rv$edge_error <- paste(\"Node(s) not found:\", paste(missing_nodes, collapse = \", \"))\n      return()\n    }\n    \n    from_id <- rv$nodes$id[rv$nodes$label == input$from_node]\n    to_id <- rv$nodes$id[rv$nodes$label == input$to_node]\n    \n    # Check if edge exists\n    edge_exists <- any(rv$edges$from == from_id & rv$edges$to == to_id)\n    \n    if (!edge_exists) {\n      rv$edge_error <- \"Edge does not exist\"\n      return()\n    }\n    \n    # Delete the edge\n    rv$edges <- rv$edges[!(rv$edges$from == from_id & rv$edges$to == to_id), ]\n    rv$has_cycles <- check_for_cycles()\n    showNotification(\"Edge deleted successfully\", type = \"message\")\n    rv$edge_error <- NULL\n  })\n  \n  # Clear all nodes (and edges)\n  observeEvent(input$clear_nodes, {\n    rv$nodes <- data.frame(\n      id = integer(), \n      label = character(), \n      type = character(),\n      mean = character(),\n      sd = character(),\n      p = character(),\n      size = character(),\n      shape = character(),\n      color = character(),\n      x = numeric(),\n      y = numeric(),\n      stringsAsFactors = FALSE\n    )\n    rv$edges <- data.frame(\n      from = integer(), \n      to = integer(), \n      value = character(), \n      label = character(), \n      dashes = logical(), \n      stringsAsFactors = FALSE\n    )\n    rv$has_cycles <- FALSE\n    rv$download_uri <- NULL\n    rv$layout_coords <- list()\n  })\n  \n  # Clear all edges\n  observeEvent(input$clear_edges, {\n    rv$edges <- data.frame(\n      from = integer(), \n      to = integer(), \n      value = character(), \n      label = character(), \n      dashes = logical(),  \n      stringsAsFactors = FALSE\n    )\n    rv$has_cycles <- FALSE\n    rv$download_uri <- NULL\n  })\n  \n  # Render the network visualization with saved positions\n  output$network <- renderVisNetwork({\n    if (nrow(rv$nodes) > 0) {\n      nodes_with_titles <- rv$nodes\n      nodes_with_titles$title <- apply(nodes_with_titles, 1, function(node) {\n        if (node[\"type\"] == \"normal\") {\n          paste0(\"Normal(μ=\", node[\"mean\"], \", σ=\", node[\"sd\"], \")\")\n        } else {\n          paste0(\"Binomial(n=\", node[\"size\"], \", p=\", node[\"p\"], \")\")\n        } \n      })\n      \n      if (rv$has_cycles) {\n        g <- graph_from_data_frame(\n          d = rv$edges[, c(\"from\", \"to\")],\n          vertices = rv$nodes$id,\n          directed = TRUE\n        )\n        nodes_in_cycles <- unique(unlist(igraph::feedback_arc_set(g)))\n        nodes_with_titles$color <- ifelse(\n          nodes_with_titles$id %in% nodes_in_cycles,\n          \"#FF9999\",\n          nodes_with_titles$color  # Use the stored color\n        )\n      }\n      \n      # Prepare edges with conditional coloring and style\n      edges_with_style <- rv$edges\n      edges_with_style$value <- NULL\n      \n      # Convert edge labels to numeric values for comparison\n      edge_values <- suppressWarnings(as.numeric(edges_with_style$label))\n      \n      # Apply color based on numeric value (light red for negative, light blue for zero/positive)\n      edges_with_style$color <- ifelse(\n        !is.na(edge_values) & edge_values < 0,\n        \"#FF9999\",  # Light red for negative values\n        \"#9AC0CD\"   # Light blue for zero/positive values\n      )\n      \n      # For non-numeric values, use default color\n      edges_with_style$color[is.na(edge_values)] <- \"#9AC0CD\"\n      \n      # Apply edge style (dashes)\n      edges_with_style$dashes <- edges_with_style$dashes\n      \n      visNetwork(nodes_with_titles, edges_with_style) %>%\n        visNodes( \n          color = ~color) %>%  \n        visEdges(\n          arrows = \"to\",\n          width = 2,\n          font = list(size = 15),\n          smooth = FALSE,\n          dashes = ~dashes  \n        ) %>%\n        visOptions(manipulation = FALSE) %>%\n        visPhysics(enabled = FALSE) %>%\n        visIgraphLayout(type = \"full\", layout = \"layout_nicely\") %>% \n        visInteraction(\n          hover = TRUE,\n          dragNodes = TRUE,\n          dragView = TRUE,\n          zoomView = TRUE\n        ) %>%\n        visEvents(\n          dragEnd = \"function(params) {\n          if(params.nodes.length > 0){\n            Shiny.setInputValue('node_dragged', params.nodes[0]);\n            Shiny.setInputValue('node_positions', this.getPositions());\n          }\n        }\"\n        )\n    }\n  })\n  \n  # Display node attributes in a table (excluding x, y, shape, and color positions)\n  output$node_table <- renderDT({\n    # Create a copy of nodes without x, y, shape, and color columns\n    display_nodes <- rv$nodes\n    if (nrow(display_nodes) > 0) {\n      display_nodes <- display_nodes[, !(names(display_nodes) %in% c(\"x\", \"y\", \"shape\", \"color\"))]\n    }\n    datatable(display_nodes, options = list(pageLength = 5))\n  })\n}\n\n# Custom JavaScript to handle position tracking\njscode <- '\nShiny.addCustomMessageHandler(\"injectScript\", function(message) {\n  // Function to send positions to Shiny\n  function sendPositionsToShiny() {\n    var positions = network.getPositions();\n    Shiny.setInputValue(\"network_positions\", positions);\n  }\n  \n  // Send positions initially\n  setTimeout(sendPositionsToShiny, 500);\n  \n  // Send positions periodically to ensure we capture them\n  setInterval(sendPositionsToShiny, 1000);\n});\n\nShiny.addCustomMessageHandler(\"getPositions\", function(message) {\n  var positions = network.getPositions();\n  Shiny.setInputValue(\"network_positions\", positions);\n  alert(\"Positions captured: \" + Object.keys(positions).length + \" nodes\");\n});\n'\n\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"DAGGR.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"README.md","content":"# DAGGR\n","type":"text"},{"name":"www/DAGGR_logo.svg","content":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   width=\"227.81284mm\"\n   height=\"283.42154mm\"\n   viewBox=\"0 0 227.81284 283.42153\"\n   version=\"1.1\"\n   id=\"svg1\"\n   xml:space=\"preserve\"\n   inkscape:version=\"1.4.2 (ebf0e940, 2025-05-08)\"\n   sodipodi:docname=\"DAGGR.svg\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"><sodipodi:namedview\n     id=\"namedview1\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#000000\"\n     borderopacity=\"0.25\"\n     inkscape:showpageshadow=\"2\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pagecheckerboard=\"0\"\n     inkscape:deskcolor=\"#d1d1d1\"\n     inkscape:document-units=\"mm\"\n     inkscape:zoom=\"0.64\"\n     inkscape:cx=\"8071.0938\"\n     inkscape:cy=\"1098.4375\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1227\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"28\"\n     inkscape:window-maximized=\"0\"\n     inkscape:current-layer=\"g1-9\"><inkscape:page\n       x=\"0\"\n       y=\"0\"\n       width=\"227.81284\"\n       height=\"283.42154\"\n       id=\"page6\"\n       margin=\"0\"\n       bleed=\"0\" /><\/sodipodi:namedview><defs\n     id=\"defs1\"><rect\n       x=\"7225\"\n       y=\"1237.5\"\n       width=\"300\"\n       height=\"121.875\"\n       id=\"rect92\" /><color-profile\n       inkscape:label=\"sRGB IEC61966-2.1\"\n       name=\"sRGB IEC61966-2.1\"\n       xlink:href=\"data:application/vnd.iccprofile;base64,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\"\n       id=\"color-profile9\" /><color-profile\n       inkscape:label=\"Generic Gray Gamma 2.2 Profile\"\n       name=\"Generic Gray Gamma 2.2 Profile\"\n       xlink:href=\"data:application/vnd.iccprofile;base64,AAAR2GxjbXMCAAAAbW50ckdSQVlYWVogB9wACAAXAA8ALgAPYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1sY21zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZGVzYwAAAMAAAAC4ZHNjbQAAAXgAAAgaY3BydAAACZQAAAAjd3RwdAAACbgAAAAUa1RSQwAACcwAAAgMZGVzYwAAAAAAAAAfR2VuZXJpYyBHcmF5IEdhbW1hIDIuMiBQcm9maWxlAAAAAAAAAAAfAEcAZQBuAGUAcgBpAGMAIABHAHIAYQB5ACAARwBhAG0AbQBhACAAMgAuADIAIABQAHIAbwBmAGkAbABlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG1sdWMAAAAAAAAAHwAAAAxza1NLAAAALgAAAYRkYURLAAAAOgAAAbJjYUVTAAAAOAAAAex2aVZOAAAAQAAAAiRwdEJSAAAASgAAAmR1a1VBAAAALAAAAq5mckZVAAAAPgAAAtpodUhVAAAANAAAAxh6aFRXAAAAGgAAA0xrb0tSAAAAIgAAA2ZuYk5PAAAAOgAAA4hjc0NaAAAAKAAAA8JoZUlMAAAAJAAAA+pyb1JPAAAAKgAABA5kZURFAAAATgAABDhpdElUAAAATgAABIZzdlNFAAAAOAAABNR6aENOAAAAGgAABQxqYUpQAAAAJgAABSZlbEdSAAAAKgAABUxwdFBPAAAAUgAABXZubE5MAAAAQAAABchlc0VTAAAATAAABgh0aFRIAAAAMgAABlR0clRSAAAAJAAABoZmaUZJAAAARgAABqpockhSAAAAPgAABvBwbFBMAAAASgAABy5hckVHAAAALAAAB3hydVJVAAAAOgAAB6RlblVTAAAAPAAAB94AVgFhAGUAbwBiAGUAYwBuAOEAIABzAGkAdgDhACAAZwBhAG0AYQAgADIALAAyAEcAZQBuAGUAcgBpAHMAawAgAGcAcgDlACAAMgAsADIAIABnAGEAbQBtAGEALQBwAHIAbwBmAGkAbABHAGEAbQBtAGEAIABkAGUAIABnAHIAaQBzAG8AcwAgAGcAZQBuAOgAcgBpAGMAYQAgADIALgAyAEMepQB1ACAAaADsAG4AaAAgAE0A4AB1ACAAeADhAG0AIABDAGgAdQBuAGcAIABHAGEAbQBtAGEAIAAyAC4AMgBQAGUAcgBmAGkAbAAgAEcAZQBuAOkAcgBpAGMAbwAgAGQAYQAgAEcAYQBtAGEAIABkAGUAIABDAGkAbgB6AGEAcwAgADIALAAyBBcEMAQzBDAEOwRMBD0EMAAgAEcAcgBhAHkALQQzBDAEPAQwACAAMgAuADIAUAByAG8AZgBpAGwAIABnAOkAbgDpAHIAaQBxAHUAZQAgAGcAcgBpAHMAIABnAGEAbQBtAGEAIAAyACwAMgDBAGwAdABhAGwA4QBuAG8AcwAgAHMAegD8AHIAawBlACAAZwBhAG0AbQBhACAAMgAuADKQGnUocHCWjlFJXqYAMgAuADKCcl9pY8+P8Md8vBgAINaMwMkAIKwQucgAIAAyAC4AMgAg1QS4XNMMx3wARwBlAG4AZQByAGkAcwBrACAAZwByAOUAIABnAGEAbQBtAGEAIAAyACwAMgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgDhACABYQBlAGQA4QAgAGcAYQBtAGEAIAAyAC4AMgXSBdAF3gXUACAF0AXkBdUF6AAgBdsF3AXcBdkAIAAyAC4AMgBHAGEAbQBhACAAZwByAGkAIABnAGUAbgBlAHIAaQBjAQMAIAAyACwAMgBBAGwAbABnAGUAbQBlAGkAbgBlAHMAIABHAHIAYQB1AHMAdAB1AGYAZQBuAC0AUAByAG8AZgBpAGwAIABHAGEAbQBtAGEAIAAyACwAMgBQAHIAbwBmAGkAbABvACAAZwByAGkAZwBpAG8AIABnAGUAbgBlAHIAaQBjAG8AIABkAGUAbABsAGEAIABnAGEAbQBtAGEAIAAyACwAMgBHAGUAbgBlAHIAaQBzAGsAIABnAHIA5QAgADIALAAyACAAZwBhAG0AbQBhAHAAcgBvAGYAaQBsZm6QGnBwXqZ8+2VwADIALgAyY8+P8GWHTvZOAIIsMLAw7DCkMKww8zDeACAAMgAuADIAIDDXMO0w1TChMKQw6wOTA7UDvQO5A7oDzAAgA5MDugPBA7kAIAOTA6wDvAO8A7EAIAAyAC4AMgBQAGUAcgBmAGkAbAAgAGcAZQBuAOkAcgBpAGMAbwAgAGQAZQAgAGMAaQBuAHoAZQBuAHQAbwBzACAAZABhACAARwBhAG0AbQBhACAAMgAsADIAQQBsAGcAZQBtAGUAZQBuACAAZwByAGkAagBzACAAZwBhAG0AbQBhACAAMgAsADIALQBwAHIAbwBmAGkAZQBsAFAAZQByAGYAaQBsACAAZwBlAG4A6QByAGkAYwBvACAAZABlACAAZwBhAG0AbQBhACAAZABlACAAZwByAGkAcwBlAHMAIAAyACwAMg4jDjEOBw4qDjUOQQ4BDiEOIQ4yDkAOAQ4jDiIOTA4XDjEOSA4nDkQOGwAgADIALgAyAEcAZQBuAGUAbAAgAEcAcgBpACAARwBhAG0AYQAgADIALAAyAFkAbABlAGkAbgBlAG4AIABoAGEAcgBtAGEAYQBuACAAZwBhAG0AbQBhACAAMgAsADIAIAAtAHAAcgBvAGYAaQBpAGwAaQBHAGUAbgBlAHIAaQENAGsAaQAgAEcAcgBhAHkAIABHAGEAbQBtAGEAIAAyAC4AMgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAcwB6AGEAcgBvAVsAYwBpACAAZwBhAG0AbQBhACAAMgAsADIGOgYnBkUGJwAgADIALgAyACAGRAZIBkYAIAYxBkUGJwYvBkoAIAY5BicGRQQeBDEESQQwBE8AIARBBDUEQAQwBE8AIAQzBDAEPAQ8BDAAIAAyACwAMgAtBD8EQAQ+BEQEOAQ7BEwARwBlAG4AZQByAGkAYwAgAEcAcgBhAHkAIABHAGEAbQBtAGEAIAAyAC4AMgAgAFAAcgBvAGYAaQBsAGUAAHRleHQAAAAAQ29weXJpZ2h0IEFwcGxlIEluYy4sIDIwMTIAAFhZWiAAAAAAAADzUQABAAAAARbMY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGDAYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIU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\"\n       id=\"color-profile7\" /><color-profile\n       inkscape:label=\"sRGB IEC61966-2.1\"\n       name=\"sRGB IEC61966-2.1\"\n       xlink:href=\"data:application/vnd.iccprofile;base64,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\"\n       id=\"color-profile6\" /><color-profile\n       inkscape:label=\"sRGB IEC61966-2.1\"\n       name=\"sRGB IEC61966-2.1\"\n       xlink:href=\"data:application/vnd.iccprofile;base64,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\"\n       id=\"color-profile8\" /><clipPath\n       clipPathUnits=\"userSpaceOnUse\"\n       id=\"clipPath23-6\"><path\n         d=\"m 560,404 h 800 V 904 H 560 Z\"\n         transform=\"translate(0,-2.5000001e-5)\"\n         id=\"path23-2\" /><\/clipPath><clipPath\n       clipPathUnits=\"userSpaceOnUse\"\n       id=\"clipPath27\"><path\n         d=\"m 560,404 h 800 V 904 H 560 Z\"\n         transform=\"translate(0,-2.5000001e-5)\"\n         id=\"path27\" /><\/clipPath><clipPath\n       clipPathUnits=\"userSpaceOnUse\"\n       id=\"clipPath33\"><path\n         d=\"m 560,404 h 800 V 904 H 560 Z\"\n         transform=\"translate(0,-2.5000001e-5)\"\n         id=\"path33\" /><\/clipPath><color-profile\n       inkscape:label=\"Generic Gray Gamma 2.2 Profile\"\n       name=\"Generic Gray Gamma 2.2 Profile\"\n       xlink:href=\"data:application/vnd.iccprofile;base64,AAAR2GxjbXMCAAAAbW50ckdSQVlYWVogB9wACAAXAA8ALgAPYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1sY21zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZGVzYwAAAMAAAAC4ZHNjbQAAAXgAAAgaY3BydAAACZQAAAAjd3RwdAAACbgAAAAUa1RSQwAACcwAAAgMZGVzYwAAAAAAAAAfR2VuZXJpYyBHcmF5IEdhbW1hIDIuMiBQcm9maWxlAAAAAAAAAAAfAEcAZQBuAGUAcgBpAGMAIABHAHIAYQB5ACAARwBhAG0AbQBhACAAMgAuADIAIABQAHIAbwBmAGkAbABlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG1sdWMAAAAAAAAAHwAAAAxza1NLAAAALgAAAYRkYURLAAAAOgAAAbJjYUVTAAAAOAAAAex2aVZOAAAAQAAAAiRwdEJSAAAASgAAAmR1a1VBAAAALAAAAq5mckZVAAAAPgAAAtpodUhVAAAANAAAAxh6aFRXAAAAGgAAA0xrb0tSAAAAIgAAA2ZuYk5PAAAAOgAAA4hjc0NaAAAAKAAAA8JoZUlMAAAAJAAAA+pyb1JPAAAAKgAABA5kZURFAAAATgAABDhpdElUAAAATgAABIZzdlNFAAAAOAAABNR6aENOAAAAGgAABQxqYUpQAAAAJgAABSZlbEdSAAAAKgAABUxwdFBPAAAAUgAABXZubE5MAAAAQAAABchlc0VTAAAATAAABgh0aFRIAAAAMgAABlR0clRSAAAAJAAABoZmaUZJAAAARgAABqpockhSAAAAPgAABvBwbFBMAAAASgAABy5hckVHAAAALAAAB3hydVJVAAAAOgAAB6RlblVTAAAAPAAAB94AVgFhAGUAbwBiAGUAYwBuAOEAIABzAGkAdgDhACAAZwBhAG0AYQAgADIALAAyAEcAZQBuAGUAcgBpAHMAawAgAGcAcgDlACAAMgAsADIAIABnAGEAbQBtAGEALQBwAHIAbwBmAGkAbABHAGEAbQBtAGEAIABkAGUAIABnAHIAaQBzAG8AcwAgAGcAZQBuAOgAcgBpAGMAYQAgADIALgAyAEMepQB1ACAAaADsAG4AaAAgAE0A4AB1ACAAeADhAG0AIABDAGgAdQBuAGcAIABHAGEAbQBtAGEAIAAyAC4AMgBQAGUAcgBmAGkAbAAgAEcAZQBuAOkAcgBpAGMAbwAgAGQAYQAgAEcAYQBtAGEAIABkAGUAIABDAGkAbgB6AGEAcwAgADIALAAyBBcEMAQzBDAEOwRMBD0EMAAgAEcAcgBhAHkALQQzBDAEPAQwACAAMgAuADIAUAByAG8AZgBpAGwAIABnAOkAbgDpAHIAaQBxAHUAZQAgAGcAcgBpAHMAIABnAGEAbQBtAGEAIAAyACwAMgDBAGwAdABhAGwA4QBuAG8AcwAgAHMAegD8AHIAawBlACAAZwBhAG0AbQBhACAAMgAuADKQGnUocHCWjlFJXqYAMgAuADKCcl9pY8+P8Md8vBgAINaMwMkAIKwQucgAIAAyAC4AMgAg1QS4XNMMx3wARwBlAG4AZQByAGkAcwBrACAAZwByAOUAIABnAGEAbQBtAGEAIAAyACwAMgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgDhACABYQBlAGQA4QAgAGcAYQBtAGEAIAAyAC4AMgXSBdAF3gXUACAF0AXkBdUF6AAgBdsF3AXcBdkAIAAyAC4AMgBHAGEAbQBhACAAZwByAGkAIABnAGUAbgBlAHIAaQBjAQMAIAAyACwAMgBBAGwAbABnAGUAbQBlAGkAbgBlAHMAIABHAHIAYQB1AHMAdAB1AGYAZQBuAC0AUAByAG8AZgBpAGwAIABHAGEAbQBtAGEAIAAyACwAMgBQAHIAbwBmAGkAbABvACAAZwByAGkAZwBpAG8AIABnAGUAbgBlAHIAaQBjAG8AIABkAGUAbABsAGEAIABnAGEAbQBtAGEAIAAyACwAMgBHAGUAbgBlAHIAaQBzAGsAIABnAHIA5QAgADIALAAyACAAZwBhAG0AbQBhAHAAcgBvAGYAaQBsZm6QGnBwXqZ8+2VwADIALgAyY8+P8GWHTvZOAIIsMLAw7DCkMKww8zDeACAAMgAuADIAIDDXMO0w1TChMKQw6wOTA7UDvQO5A7oDzAAgA5MDugPBA7kAIAOTA6wDvAO8A7EAIAAyAC4AMgBQAGUAcgBmAGkAbAAgAGcAZQBuAOkAcgBpAGMAbwAgAGQAZQAgAGMAaQBuAHoAZQBuAHQAbwBzACAAZABhACAARwBhAG0AbQBhACAAMgAsADIAQQBsAGcAZQBtAGUAZQBuACAAZwByAGkAagBzACAAZwBhAG0AbQBhACAAMgAsADIALQBwAHIAbwBmAGkAZQBsAFAAZQByAGYAaQBsACAAZwBlAG4A6QByAGkAYwBvACAAZABlACAAZwBhAG0AbQBhACAAZABlACAAZwByAGkAcwBlAHMAIAAyACwAMg4jDjEOBw4qDjUOQQ4BDiEOIQ4yDkAOAQ4jDiIOTA4XDjEOSA4nDkQOGwAgADIALgAyAEcAZQBuAGUAbAAgAEcAcgBpACAARwBhAG0AYQAgADIALAAyAFkAbABlAGkAbgBlAG4AIABoAGEAcgBtAGEAYQBuACAAZwBhAG0AbQBhACAAMgAsADIAIAAtAHAAcgBvAGYAaQBpAGwAaQBHAGUAbgBlAHIAaQENAGsAaQAgAEcAcgBhAHkAIABHAGEAbQBtAGEAIAAyAC4AMgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAcwB6AGEAcgBvAVsAYwBpACAAZwBhAG0AbQBhACAAMgAsADIGOgYnBkUGJwAgADIALgAyACAGRAZIBkYAIAYxBkUGJwYvBkoAIAY5BicGRQQeBDEESQQwBE8AIARBBDUEQAQwBE8AIAQzBDAEPAQ8BDAAIAAyACwAMgAtBD8EQAQ+BEQEOAQ7BEwARwBlAG4AZQByAGkAYwAgAEcAcgBhAHkAIABHAGEAbQBtAGEAIAAyAC4AMgAgAFAAcgBvAGYAaQBsAGUAAHRleHQAAAAAQ29weXJpZ2h0IEFwcGxlIEluYy4sIDIwMTIAAFhZWiAAAAAAAADzUQABAAAAARbMY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGDAYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIU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\"\n       id=\"color-profile10\" /><\/defs><g\n     id=\"g1-3\"\n     inkscape:groupmode=\"layer\"\n     inkscape:label=\"1\"\n     transform=\"matrix(0.26458333,0,0,0.26458333,-349.86841,-95.536627)\"><path\n       id=\"path32-3\"\n       d=\"M 960,504 V 804\"\n       style=\"fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n       transform=\"matrix(-1.3333333,0,0,1.3333333,3435,-310.91666)\"\n       clip-path=\"url(#clipPath33)\"\n       inkscape:export-filename=\"../Documents/Arbeit/BIPS/DAGger/www/DAGGR_logo.svg\"\n       inkscape:export-xdpi=\"96\"\n       inkscape:export-ydpi=\"96\" /><\/g><g\n     id=\"g1-9\"\n     inkscape:groupmode=\"layer\"\n     inkscape:label=\"1\"\n     transform=\"matrix(0.26458333,0,0,0.26458333,-1114.9351,-95.536627)\"><path\n       sodipodi:type=\"star\"\n       style=\"fill:#303030;fill-opacity:1;stroke:#bcbcbc;stroke-width:16.7887;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path91\"\n       inkscape:flatsided=\"true\"\n       sodipodi:sides=\"6\"\n       sodipodi:cx=\"4808.5029\"\n       sodipodi:cy=\"1042.9825\"\n       sodipodi:r1=\"487.41986\"\n       sodipodi:r2=\"422.11798\"\n       sodipodi:arg1=\"1.5707963\"\n       sodipodi:arg2=\"2.0943951\"\n       inkscape:rounded=\"0\"\n       inkscape:randomized=\"0\"\n       d=\"m 4808.5029,1530.4024 -422.1179,-243.7099 -1e-4,-487.41988 422.118,-243.70994 422.118,243.70992 0,487.4199 z\"\n       transform=\"translate(-164.0625,-107.8125)\"\n       inkscape:export-filename=\"../Documents/Arbeit/BIPS/DAGger/www/DAGGR_logo.svg\"\n       inkscape:export-xdpi=\"96\"\n       inkscape:export-ydpi=\"96\" /><path\n       id=\"path22\"\n       d=\"m 610,504 h 700\"\n       style=\"fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n       transform=\"matrix(1.2070642,0,0,-1.1565566,3483.5879,1705.4615)\"\n       clip-path=\"url(#clipPath23-6)\" /><path\n       id=\"path26-6\"\n       d=\"M 660,454 V 854\"\n       style=\"fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n       transform=\"matrix(1.2070642,0,0,-1.1565566,3483.5879,1705.4615)\"\n       clip-path=\"url(#clipPath27)\" /><path\n       fill=\"none\"\n       stroke=\"#000000\"\n       d=\"m 5032.6974,1033.5774 c -37.7203,0 -69.5763,-8.79 -97.0238,-23.642 -39.9595,-21.5974 -70.5873,-56.0362 -96.3632,-94.8712 -37.7473,-56.8445 -65.1275,-123.1103 -96.2419,-172.41508 -27.0027,-42.78802 -56.8096,-72.7952 -98.6281,-72.7952 -41.9263,0 -71.7736,30.15874 -98.8302,73.11094 -31.0605,49.31744 -58.4272,115.49484 -96.134,172.25084 -25.9917,39.1243 -56.904,73.7676 -97.3339,95.2879 -27.2049,14.5111 -58.7238,23.0738 -95.9588,23.0738\"\n       id=\"path11-3\"\n       style=\"fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:7.91433;stroke-dasharray:none;stroke-opacity:1\" /><text\n       xml:space=\"preserve\"\n       transform=\"matrix(7.3723891,0,0,7.3723891,-48875.827,-8044.5503)\"\n       id=\"text92\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:18.6667px;font-family:Arial;-inkscape-font-specification:Arial;text-align:start;writing-mode:lr-tb;direction:ltr;white-space:pre;shape-inside:url(#rect92);display:inline;fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.514198;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"><tspan\n         x=\"7225\"\n         y=\"1254.3141\"\n         id=\"tspan10\">DAGGR<\/tspan><\/text><\/g><g\n     id=\"g1-7\"\n     inkscape:groupmode=\"layer\"\n     inkscape:label=\"1\"\n     transform=\"matrix(0.26458333,0,0,0.26458334,337.46503,-95.536627)\"><path\n       id=\"path104\"\n       d=\"m -809.76802,776.78479 104.81013,-104.81012 25.83592,25.83592 -104.81013,104.81012 -25.83592,-25.83592\"\n       style=\"fill:#fffefd;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.90171\" /><path\n       id=\"path105\"\n       d=\"m -751.26746,852.73036 c 1.70884,-8.87552 -1.04565,-17.94232 -7.37073,-24.26742 l -38.48605,-38.48604 8.99663,-8.99665 38.48607,38.48606 c 9.31544,9.31546 13.37705,22.64786 10.87761,35.66785 l -12.50353,-2.4038\"\n       style=\"fill:#fffefd;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.90171\" /><path\n       id=\"path106\"\n       d=\"m -743.82015,865.68656 c -6.85427,6.8543 -17.97421,6.8543 -24.82848,0 -6.86068,-6.8607 -6.85427,-17.97416 0,-24.82845 6.86069,-6.86069 17.96779,-6.86069 24.82849,0 6.85426,6.85427 6.86068,17.96775 -10e-6,24.82845\"\n       style=\"fill:#fffefd;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.90171\" /><path\n       id=\"path107\"\n       d=\"m -859.8713,744.1265 -2.40381,-12.50352 c 13.01363,-2.50579 26.3524,1.56216 35.66145,10.87122 l 38.48605,38.48605 -8.99663,8.99665 -38.48606,-38.48606 c -6.31869,-6.31868 -15.39185,-9.07952 -24.261,-7.36434\"\n       style=\"fill:#fffefd;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.90171\" /><path\n       id=\"path108\"\n       d=\"m -872.82753,736.67921 c -6.8543,6.85428 -6.86059,17.96783 10e-6,24.82847 6.85429,6.85433 17.97418,6.85429 24.82845,0 6.86069,-6.86067 6.85434,-17.97415 10e-6,-24.82847 -6.86064,-6.86064 -17.96777,-6.86068 -24.82847,0\"\n       style=\"fill:#fffefd;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.90171\" /><path\n       id=\"path109\"\n       d=\"m -1034.9586,1027.8113 250.40803,-216.5765 -33.83155,-33.83153 z\"\n       style=\"fill:#fffefd;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.90171\" /><rect\n       style=\"fill:#303030;fill-opacity:1;stroke:none;stroke-width:4.56154;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect427\"\n       width=\"58.181019\"\n       height=\"53.01083\"\n       x=\"229.29053\"\n       y=\"1276.054\"\n       transform=\"matrix(0.6864206,0.72720475,-0.83787051,0.54586904,0,0)\" /><path\n       style=\"fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:2.32441;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       d=\"m -937.52946,859.60678 c 0,0 17.93687,0.48683 26.07018,5.07848 8.55143,4.82762 19.13159,18.90722 19.13159,18.90722 0,0 10.36013,13.09312 19.73493,17.70476 9.37481,4.61154 25.46684,6.28094 25.46684,6.28094\"\n       id=\"path427\"\n       sodipodi:nodetypes=\"csczc\" /><path\n       style=\"fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:2.32441;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       d=\"m -979.87379,911.52826 c 0,0 17.65399,-3.2101 26.55738,-0.3881 9.36108,2.967 22.60911,14.5715 22.60911,14.5715 0,0 12.82996,10.6843 22.95245,13.2707 10.12248,2.5863 26.21405,0.9127 26.21405,0.9127\"\n       id=\"path427-9\"\n       sodipodi:nodetypes=\"csczc\" /><circle\n       style=\"fill:#fffefd;fill-opacity:1;stroke:none;stroke-width:2.32441;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path429\"\n       cx=\"-687.6673\"\n       cy=\"680.51996\"\n       r=\"25.135437\" /><rect\n       style=\"fill:#303030;fill-opacity:1;stroke:none;stroke-width:11.9898;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect427-4\"\n       width=\"148.03271\"\n       height=\"143.94106\"\n       x=\"1193.29\"\n       y=\"348.9614\"\n       transform=\"matrix(-0.45618928,0.88988277,-0.93427809,-0.35654516,0,0)\" /><\/g><\/svg>\n","type":"text"}]
